// Package redis implements the Azure ARM Redis service API version 2018-03-01.
//
// REST API for Azure Redis Cache Service.
package redis

import (
	"net/url"

	"github.com/Azure/azure-pipeline-go/pipeline"
)

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

const (
	// DefaultBaseURI is the default URI used for the service Redis
	DefaultBaseURI = "https://management.azure.com"
)

// Client is the base client for Redis.
type Client struct {
	p pipeline.Pipeline
	u *url.URL
	s string
}

func (c Client) Operations() IOperations {
	return operationsClient{&c}
}

func (c Client) Redis() IRedis {
	return client{&c}
}

// NewClient creates an instance of the Client client.
func NewClient(subscriptionID string, p pipeline.Pipeline) Client {
	if p == nil {
		panic("pipeline cannot be nil")
	}
	u, err := url.Parse(DefaultBaseURI)
	if err != nil {
		panic(err)
	}
	return Client{
		p: p,
		u: u,
		s: subscriptionID,
	}
}

// NewClientWithURI creates an instance of the Client client.
func NewClientWithURI(u url.URL, subscriptionID string, p pipeline.Pipeline) Client {
	if p == nil {
		panic("pipeline cannot be nil")
	}
	return Client{
		p: p,
		u: &u,
		s: subscriptionID,
	}
}
