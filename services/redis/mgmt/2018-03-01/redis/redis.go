package redis

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"net/http"
	"net/url"

	"github.com/Azure/azure-pipeline-go/pipeline"
	"github.com/jhendrixMSFT/azure-sdk-proto-go/internal/runtime"
	"github.com/jhendrixMSFT/azure-sdk-proto-go/internal/validation"
)

type IRedis interface {
	CheckNameAvailability(ctx context.Context, parameters CheckNameAvailabilityParameters) (*CheckNameAvailabilityResponse, error)
	Get(ctx context.Context, resourceGroupName string, name string) (*ResourceType, error)
}

// Client is the REST API for Azure Redis Cache Service.
type Client struct {
	BaseClient
}

// NewClient creates an instance of the Client client.
func NewClient(subscriptionID string, p pipeline.Pipeline) Client {
	return Client{NewBaseClient(subscriptionID, p)}
}

// NewClientWithURI creates an instance of the Client client.
func NewClientWithURI(u url.URL, subscriptionID string, p pipeline.Pipeline) Client {
	return Client{NewBaseClientWithURI(u, subscriptionID, p)}
}

// CheckNameAvailability checks that the redis cache name is valid and is not already in use.
// Parameters:
// parameters - parameters supplied to the CheckNameAvailability Redis operation. The only supported resource
// type is 'Microsoft.Cache/redis'
func (client Client) CheckNameAvailability(ctx context.Context, parameters CheckNameAvailabilityParameters) (*CheckNameAvailabilityResponse, error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: parameters,
			Constraints: []validation.Constraint{{Target: "parameters.Name", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "parameters.Type", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return nil, validation.NewError("redis.Client", "CheckNameAvailability", err.Error())
	}
	req, err := client.checkNameAvailabilityPreparer(ctx, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, runtime.NewResponderPolicyFactory(client.checkNameAvailabilityResponder), req)
	if err != nil {
		return nil, err
	}
	return resp.(*CheckNameAvailabilityResponse), err
}

// CheckNameAvailabilityPreparer prepares the CheckNameAvailability request.
func (client Client) checkNameAvailabilityPreparer(ctx context.Context, parameters CheckNameAvailabilityParameters) (pipeline.Request, error) {
	b, err := runtime.ToJSON(parameters)
	if err != nil {
		return pipeline.Request{}, pipeline.NewError(err, "failed to marshal 'parameters'")
	}
	u := client.u
	u.Path = runtime.ReplacePathParams("/subscriptions/{subscriptionId}/providers/Microsoft.Cache/CheckNameAvailability", map[string]string{
		"subscriptionId": client.s,
	})
	req, err := pipeline.NewRequest(http.MethodPost, u, b)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", "2018-03-01")
	req.URL.RawQuery = params.Encode()
	req.Header.Set("Content-Type", "application/json; charset=utf-8")
	req.Header.Set("User-Agent", UserAgent())
	return req, nil
}

// CheckNameAvailabilityResponder handles the response to the CheckNameAvailability request. The method always
// closes the http.Response Body.
func (client Client) checkNameAvailabilityResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := runtime.ValidateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	return &CheckNameAvailabilityResponse{rawResponse: resp.Response()}, err
}

// Create create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
// Parameters:
// resourceGroupName - the name of the resource group.
// name - the name of the Redis cache.
// parameters - parameters supplied to the Create Redis operation.
/*func (client Client) Create(ctx context.Context, resourceGroupName string, name string, parameters CreateParameters) (result CreateFuture, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: parameters,
			Constraints: []validation.Constraint{{Target: "parameters.CreateProperties", Name: validation.Null, Rule: true,
				Chain: []validation.Constraint{{Target: "parameters.CreateProperties.Sku", Name: validation.Null, Rule: true,
					Chain: []validation.Constraint{{Target: "parameters.CreateProperties.Sku.Capacity", Name: validation.Null, Rule: true, Chain: nil}}},
					{Target: "parameters.CreateProperties.SubnetID", Name: validation.Null, Rule: false,
						Chain: []validation.Constraint{{Target: "parameters.CreateProperties.SubnetID", Name: validation.Pattern, Rule: `^/subscriptions/[^/]* /resourceGroups/[^/]* /providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]* /subnets/[^/]*$`, Chain: nil}}},
					{Target: "parameters.CreateProperties.StaticIP", Name: validation.Null, Rule: false,
						Chain: []validation.Constraint{{Target: "parameters.CreateProperties.StaticIP", Name: validation.Pattern, Rule: `^\d+\.\d+\.\d+\.\d+$`, Chain: nil}}},
				}},
				{Target: "parameters.Location", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("redis.Client", "Create", err.Error())
	}

	req, err := client.createPreparer(ctx, resourceGroupName, name, parameters)
	if err != nil {
		err = autorest.NewErrorWithError(err, "redis.Client", "Create", nil, "Failure preparing request")
		return
	}

	result, err = client.createSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "redis.Client", "Create", result.Response(), "Failure sending request")
		return
	}

	return
}

// CreatePreparer prepares the Create request.
func (client Client) createPreparer(ctx context.Context, resourceGroupName string, name string, parameters CreateParameters) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"name":              autorest.Encode("path", name),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-03-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}", pathParameters),
		autorest.WithJSON(parameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
	req.Header.Set("User-Agent", UserAgent())
}

// CreateSender sends the Create request. The method will close the
// http.Response Body if it receives an error.
func (client Client) createSender(req *http.Request) (future CreateFuture, err error) {
	var resp *http.Response
	resp, err = autorest.SendWithSender(client, req,
		azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	err = autorest.Respond(resp, azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated))
	if err != nil {
		return
	}
	future.Future, err = azure.NewFutureFromResponse(resp)
	return
}

// CreateResponder handles the response to the Create request. The method always
// closes the http.Response Body.
func (client Client) createResponder(resp pipeline.Response) (*ResourceType, error) {
	/*err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
	err := runtime.ValidateResponse(resp, http.StatusOK, http.StatusCreated)
	if resp == nil {
		return nil, err
	}
	return &ResourceType{rawResponse: resp.Response()}, err
}*/

// Get gets a Redis cache (resource description).
// Parameters:
// resourceGroupName - the name of the resource group.
// name - the name of the Redis cache.
func (client Client) Get(ctx context.Context, resourceGroupName string, name string) (*ResourceType, error) {
	req, err := client.getPreparer(ctx, resourceGroupName, name)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, runtime.NewResponderPolicyFactory(client.getResponder), req)
	if err != nil {
		return nil, err
	}
	return resp.(*ResourceType), err
}

// GetPreparer prepares the Get request.
func (client Client) getPreparer(ctx context.Context, resourceGroupName string, name string) (pipeline.Request, error) {
	u := client.u
	u.Path = runtime.ReplacePathParams("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}", map[string]string{
		"name":              name,
		"resourceGroupName": resourceGroupName,
		"subscriptionId":    client.s,
	})
	req, err := pipeline.NewRequest(http.MethodGet, u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", "2018-03-01")
	req.URL.RawQuery = params.Encode()
	req.Header.Set("User-Agent", UserAgent())
	return req, nil
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client Client) getResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := runtime.ValidateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &ResourceType{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	return result, runtime.FromJSON(resp, result)
}
